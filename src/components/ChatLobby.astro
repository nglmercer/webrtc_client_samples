---
// src/components/ChatLobby.astro
export interface Props {
    title?: string;
}

const { title = "Bienvenido al Lobby" } = Astro.props;

import MaterialIcon from './MaterialIcon.vue';
import RoomList from './RoomList.vue';
import ConnectionStatus from './ConnectionStatus.vue';

// Configuración de tipos de chat
const chatTypes = [
    {
        type: 'text',
        label: 'Chat de Texto',
        color: 'blue',
        icon: 'chat'
    },
    {
        type: 'voice',
        label: 'Chat de Voz',
        color: 'green',
        icon: 'mic'
    },
    {
        type: 'video',
        label: 'Chat de Video',
        color: 'red',
        icon: 'videocam'
    }
];
---

<div class="min-h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900">
    <div id="app" class="min-h-screen flex flex-col">
        <!-- Header -->
        <header class="bg-white/10 backdrop-blur-md border-b border-white/20">
            <div class="container mx-auto px-6 py-4">
                <div class="flex items-center justify-between">
                    <h1 class="text-3xl font-bold text-white">
                        {title}
                    </h1>
                    <ConnectionStatus client:load />
                </div>
            </div>
        </header>

        <!-- Content -->
        <main class="flex-1 flex items-start justify-center p-6">
            <div class="w-full max-w-6xl grid grid-cols-1 lg:grid-cols-2 gap-8">
                <!-- Formulario de creación/unión -->
                <div class="bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 shadow-2xl">
                    <!-- Form Group - Usuario -->
                    <div class="mb-6">
                        <label 
                            for="userId" 
                            class="block text-sm font-medium text-white mb-2"
                        >
                            Tu Nombre de Usuario
                        </label>
                        <input 
                            type="text" 
                            id="userId" 
                            placeholder="Ej: ana" 
                            value="user"
                            class="w-full px-4 py-3 bg-white/10 border border-white/30 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                        />
                    </div>

                    <!-- Form Group - Sala -->
                    <div class="mb-8">
                        <label 
                            for="roomId" 
                            class="block text-sm font-medium text-white mb-2"
                        >
                            Nombre de la Sala
                        </label>
                        <input 
                            type="text" 
                            id="roomId" 
                            placeholder="Ej: sala-secreta-123" 
                            value="sala"
                            class="w-full px-4 py-3 bg-white/10 border border-white/30 rounded-xl text-white placeholder-white/60 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent transition-all duration-200"
                        />
                    </div>

                    <!-- Button Group -->
                    <div class="space-y-4">
                        <p class="text-center text-white/70 text-sm">
                            Elige el tipo de chat para crear o unirte:
                        </p>
                        
                        <div class="space-y-3">
                            {chatTypes.map(({ type, label, color, icon }) => (
                                <a 
                                    href="#" 
                                    class={`chat-button w-full flex items-center justify-center px-6 py-4 bg-${color}-600 hover:bg-${color}-700 text-white font-semibold rounded-xl transition-all duration-200 transform hover:scale-105 hover:shadow-lg`}
                                    data-type={type}
                                >
                                    <MaterialIcon icon={icon} size="text-xl" customSize="20px" />
                                    <span class="ml-2">{label}</span>
                                </a>
                            ))}
                        </div>
                    </div>
                </div>
                
                <!-- Lista de salas disponibles -->
                <div class="bg-white/10 backdrop-blur-md rounded-2xl border border-white/20 p-8 shadow-2xl">
                    <RoomList client:load userId="user" />
                </div>
            </div>
        </main>
    </div>
</div>

<script>
    // Importar el socket centralizado para inicializar la conexión
    import "../lib/socket";
    
    // Función para navegar a una sala de chat
    function navigateToChat(chatType: string, userId: string, roomId: string) {
        const params = new URLSearchParams({
            userId: userId,
            roomId: roomId
        });
        window.location.href = `/chat-${chatType}?${params.toString()}`;
    }
    
    // Función para unirse a una sala existente
    function joinExistingRoom(roomName: string) {
        const userId = (document.getElementById('userId') as HTMLInputElement)?.value.trim();
        
        if (!userId) {
            alert('Por favor, introduce tu nombre de usuario.');
            return;
        }
        
        // Por defecto, usar chat de video para salas existentes
        navigateToChat('video', userId, roomName);
    }
    
    // Hacer la función disponible globalmente para el componente Vue
    (window as any).joinExistingRoom = joinExistingRoom;

    // Event listener para los botones de chat
    document.addEventListener('DOMContentLoaded', () => {
        const chatButtons = document.querySelectorAll('.chat-button');
        
        chatButtons.forEach(button => {
            button.addEventListener('click', (e) => {
                e.preventDefault();
                
                const userId = (document.getElementById('userId') as HTMLInputElement)?.value.trim();
                const roomId = (document.getElementById('roomId') as HTMLInputElement)?.value.trim();
                const chatType = (e.currentTarget as HTMLAnchorElement)?.dataset?.type;
                
                if (!userId || !roomId) {
                    alert('Por favor, introduce tu nombre y el de la sala.');
                    return;
                }
                
                navigateToChat(chatType!, userId, roomId);
            });
        });
        
        // Escuchar eventos del componente RoomList
        document.addEventListener('roomSelected', (event: any) => {
            joinExistingRoom(event.detail.roomName);
        });
    });
</script>