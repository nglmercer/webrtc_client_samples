---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Comparación de Video Grids">
  <main>
    <div class="page-header">
      <h1>🎥 UnifiedVideoGrid - Comparación</h1>
      <p>Explora las tres implementaciones del componente unificado: CSS Grid, Flexbox y Mixed con sus diferentes modos y características</p>
      
      <div class="video-selector">
        <label for="video-count">Número de videos:</label>
        <input type="range" id="video-count" min="1" max="50" value="6" />
        <span id="video-count-display">6</span>
        <button id="apply-videos">Aplicar</button>
      </div>
    </div>

    <div class="grids-showcase">
      <!-- Grid Flexbox -->
      <section class="grid-section">
          <select id="flexbox-mode">
            <option value="equal">Equal</option>
            <option value="MainSidebar">Main Sidebar</option>
            <option value="masonry">Masonry</option>
          </select>
          <div class="grid-container">
          <div id="flexbox-grid"></div>
        </div>
      </section>
      
      <!-- Grid Mixto -->
      <section class="grid-section">
        <select id="mixed-mode">
          <option value="transform">Transform</option>
          <option value="viewport">Viewport</option>
          <option value="intersection">Intersection</option>
        </select>
        <div class="grid-container">
          <div id="mixed-grid"></div>
        </div>
      </section>
    </div>
  </main>
</Layout>

<script>
  import UnifiedVideoGrid from '../components/UnifiedVideoGrid.vue';
  import { gridConfig, flexboxConfig, mixedConfig } from '../lib/gridConfigs';
  import { createApp } from 'vue';

  // Función para generar videos de prueba
  function generateTestVideos(count:number) {
    const videos = [];
    for (let i = 0; i < count; i++) {
      videos.push({
        id: i === 0 ? 'Local' : `User${i}`,
        name: i === 0 ? 'Local' : `Usuario ${i}`
      });
    }
    return videos;
  }

  // Variables para las aplicaciones Vue
  let flexboxApp:any = null, mixedApp:any = null;

  // Función para montar/remontar componentes
  function mountComponents(videoCount:number) {
    const testVideos = generateTestVideos(videoCount);

    // Desmontar aplicaciones existentes si existen
    if (flexboxApp) flexboxApp.unmount();
    if (mixedApp) mixedApp.unmount();

    // Grid Flexbox
    flexboxApp = createApp(UnifiedVideoGrid, {
      videos: testVideos,
      config: {
        ...flexboxConfig,
      }
    });
    flexboxApp.mount('#flexbox-grid');

    const flexboxInstance = flexboxApp._instance.exposed;
    const flexboxSelect = document.getElementById('flexbox-mode') as HTMLSelectElement;
    if (flexboxSelect) {
      flexboxSelect.value = flexboxConfig.defaultMode || 'equal';
      flexboxSelect.addEventListener('change', (e) => flexboxInstance.setMode(flexboxSelect.value));
    }

    // Grid Mixto
    mixedApp = createApp(UnifiedVideoGrid, {
      videos: testVideos,
      config: {
        ...mixedConfig,
      }
    });
    mixedApp.mount('#mixed-grid');

    const mixedInstance = mixedApp._instance.exposed;
    const mixedSelect = document.getElementById('mixed-mode') as HTMLSelectElement;
    if (mixedSelect) {
      mixedSelect.value = mixedConfig.defaultMode || 'transform';
      mixedSelect.addEventListener('change', (e:Event) => mixedInstance.setMode(mixedSelect.value));
    }
  }

  // Inicializar cuando el DOM esté listo
  document.addEventListener('DOMContentLoaded', () => {
    const videoCountSlider = document.getElementById('video-count') as HTMLInputElement;
    const videoCountDisplay = document.getElementById('video-count-display');
    const applyButton = document.getElementById('apply-videos');
    if (!videoCountSlider || !applyButton || !videoCountDisplay)return;
    // Actualizar display del slider
    videoCountSlider.addEventListener('input', (e) => {
      if (!e.target)return;
      videoCountDisplay.textContent = (e.target as HTMLInputElement).value;
    });

    // Aplicar cambios cuando se presione el botón
    applyButton.addEventListener('click', () => {
      const count = parseInt(videoCountSlider.value);
      mountComponents(count);
    });

    // Montar componentes inicialmente con 6 videos
    mountComponents(6);
  });
</script>

<style>
  body {
    margin: 0;
    padding: 0;
    background: #0a0a0a;
    color: #e0e0e0;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  }

  main {
    max-width: 1400px;
    margin: 0 auto;
    padding: 20px;
  }

  .page-header {
    text-align: center;
    margin-bottom: 40px;
    padding: 40px 20px;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 16px;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
  }

  .page-header h1 {
    font-size: 3rem;
    margin: 0 0 16px 0;
    background: linear-gradient(45deg, #fff, #f0f0f0);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .page-header p {
    font-size: 1.2rem;
    margin: 0 0 24px 0;
    opacity: 0.9;
  }

  .video-selector {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 16px;
    background: rgba(255, 255, 255, 0.1);
    padding: 16px 24px;
    border-radius: 12px;
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
  }

  .video-selector label {
    font-weight: 600;
    color: #fff;
    font-size: 1rem;
  }

  .video-selector input[type="range"] {
    width: 200px;
    height: 6px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 3px;
    outline: none;
    -webkit-appearance: none;
  }

  .video-selector input[type="range"]::-webkit-slider-thumb {
    -webkit-appearance: none;
    width: 20px;
    height: 20px;
    background: #4ecdc4;
    border-radius: 50%;
    cursor: pointer;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  }

  .video-selector input[type="range"]::-moz-range-thumb {
    width: 20px;
    height: 20px;
    background: #4ecdc4;
    border-radius: 50%;
    cursor: pointer;
    border: none;
    box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
  }

  #video-count-display {
    font-weight: bold;
    color: #4ecdc4;
    font-size: 1.2rem;
    min-width: 30px;
    text-align: center;
  }

  #apply-videos {
    background: linear-gradient(45deg, #4ecdc4, #44a08d);
    color: white;
    border: none;
    padding: 10px 20px;
    border-radius: 8px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(78, 205, 196, 0.3);
  }

  #apply-videos:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 16px rgba(78, 205, 196, 0.4);
  }

  #apply-videos:active {
    transform: translateY(0);
  }

  .grids-showcase {
    display: grid;
    gap: 40px;
    margin-bottom: 60px;
  }

  .grid-section {
    background: #1a1a1a;
    border-radius: 16px;
    padding: 24px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    border: 1px solid #333;
  }

  .section-header {
    margin-bottom: 24px;
  }

  .section-header h2 {
    font-size: 1.8rem;
    margin: 0 0 8px 0;
    color: #fff;
  }

  .section-header p {
    margin: 0 0 16px 0;
    color: #ccc;
    font-size: 1rem;
  }
  .grid-container {
    background: #0f0f0f;
    border-radius: 12px;
    padding: 16px;
    min-height: 400px;
  }

  .comparison-table {
    margin-bottom: 60px;
  }

  .comparison-table h2 {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 24px;
    color: #fff;
  }

  .table-container {
    background: #1a1a1a;
    border-radius: 12px;
    overflow: hidden;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
  }

  table {
    width: 100%;
    border-collapse: collapse;
  }

  th, td {
    padding: 16px;
    text-align: left;
    border-bottom: 1px solid #333;
  }

  th {
    background: #2a2a2a;
    font-weight: 600;
    color: #fff;
  }

  td {
    background: #1a1a1a;
  }

  .check {
    color: #4ecdc4;
    font-weight: bold;
  }

  .partial {
    color: #ffeaa7;
    font-weight: bold;
  }

  .cross {
    color: #ff6b6b;
    font-weight: bold;
  }

  .recommendations h2 {
    text-align: center;
    font-size: 2rem;
    margin-bottom: 32px;
    color: #fff;
  }

  .recommendations-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 24px;
  }

  .recommendation-card {
    background: #1a1a1a;
    border-radius: 12px;
    padding: 24px;
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    border: 1px solid #333;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }

  .recommendation-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 12px 35px rgba(0, 0, 0, 0.4);
  }

  .recommendation-card h3 {
    font-size: 1.3rem;
    margin: 0 0 12px 0;
    color: #4ecdc4;
  }

  .recommendation-card p {
    margin: 0 0 16px 0;
    color: #ccc;
    line-height: 1.5;
  }

  .recommendation-card ul {
    margin: 0;
    padding-left: 20px;
    color: #aaa;
  }

  .recommendation-card li {
    margin-bottom: 8px;
    line-height: 1.4;
  }

  /* Responsive */
  @media (max-width: 768px) {
    main {
      padding: 16px;
    }

    .page-header {
      padding: 24px 16px;
    }

    .page-header h1 {
      font-size: 2rem;
    }

    .video-selector {
      flex-direction: column;
      gap: 12px;
      padding: 16px;
    }

    .video-selector input[type="range"] {
      width: 100%;
      max-width: 250px;
    }

    .grid-section {
      padding: 16px;
    }

    .section-header h2 {
      font-size: 1.5rem;
    }


    .recommendations-grid {
      grid-template-columns: 1fr;
    }

    th, td {
      padding: 12px 8px;
      font-size: 0.9rem;
    }
  }

  @media (max-width: 480px) {
    .page-header h1 {
      font-size: 1.8rem;
    }

    .page-header p {
      font-size: 1rem;
    }

    .video-selector {
      padding: 12px;
    }

    .video-selector label {
      font-size: 0.9rem;
    }

    #video-count-display {
      font-size: 1.1rem;
    }

    #apply-videos {
      padding: 8px 16px;
      font-size: 0.9rem;
    }

  }
</style>